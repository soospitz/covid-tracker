{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","input","setInput","confirmed","recovered","deaths","data","setData","chart","setChart","countryName","setCountryName","CountryOption","setCountryOption","useEffect","fetch","then","response","json","body","datas","value","chartData","map","reportDate","totalConfirmed","total","console","log","countryNameList","countries","globalChart","labels","datasets","label","fill","backgroundColor","borderColor","countryChart","classes","makeStyles","option","fontSize","marginRight","floatingLabelFocusStyle","color","inputRoot","borderWidth","useStyles","className","Autocomplete","id","style","width","options","onChange","event","name","dataCountry","newCountryName","countryRegion","autoHighlight","getOptionLabel","renderOption","Fragment","iso2","renderInput","params","TextField","variant","InputLabelProps","inputProps","autoComplete","Intl","NumberFormat","format","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9648b784.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport \"./App.css\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [data, setData] = useState({\n    confirmed: \"\",\n    recovered: \"\",\n    deaths: \"\",\n  });\n  const [chart, setChart] = useState([]);\n  const [countryName, setCountryName] = useState([]);\n  const [CountryOption, setCountryOption] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://covid19.mathdro.id/api\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((body) => {\n        let datas = {\n          confirmed: body.confirmed.value,\n          recovered: body.recovered.value,\n          deaths: body.deaths.value,\n        };\n        setData(datas);\n      });\n  }, []);\n\n  const handleClick = (event, value) => {\n    setInput(value.name);\n\n    fetch(`https://covid19.mathdro.id/api/countries/${value.name}`)\n      .then((response) => {\n        return response.json();\n      })\n      .then((body) => {\n        let dataCountry = {\n          confirmed: body.confirmed.value,\n          recovered: body.recovered.value,\n          deaths: body.deaths.value,\n        };\n        setData(dataCountry);\n        console.log(dataCountry, \"datas\");\n      });\n    fetch(`https://covid19.mathdro.id/api/countries/${value.name}/confirmed`)\n      .then((response) => {\n        return response.json();\n      })\n      .then((body) => {\n        let newCountryName = body[0].countryRegion;\n        setCountryName(newCountryName);\n      });\n  };\n\n  useEffect(() => {\n    fetch(\"https://covid19.mathdro.id/api/daily\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((body) => {\n        let chartData = body.map((data) => ({\n          reportDate: data.reportDate,\n          confirmed: data.totalConfirmed,\n          recovered: data.recovered.total,\n          deaths: data.deaths.total,\n        }));\n        setChart(chartData);\n        console.log(chartData, \"key.totalConfirmed\");\n      });\n  }, []);\n\n  //country options\n  useEffect(() => {\n    fetch(\"https://covid19.mathdro.id/api/countries/\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((body) => {\n        let countryNameList = body.countries;\n        setCountryOption(countryNameList);\n        console.log(countryNameList, \"countryNameList\");\n      });\n  }, []);\n  //global chart \n  const globalChart = {\n    labels: chart.map((data) => {\n      return data.reportDate;\n    }),\n    datasets: [\n      {\n        label: \"Confirmed\",\n        data: chart.map((data) => {\n          return data.confirmed;\n        }),\n        fill: true,\n        backgroundColor: \"rgba(225,225,225,0.2)\",\n        borderColor: \"#fff\",\n      },\n      {\n        label: \"Deaths\",\n        data: chart.map((data) => {\n          return data.deaths;\n        }),\n        fill: false,\n        borderColor: \"#fc6978\",\n      },\n    ],\n  };\n  //country data chart\n  const countryChart = {\n    labels: [\"Confirmed\", \"Deaths\", \"Recovered\"],\n    datasets: [\n      {\n        label: [\"Confirmed\", \"Deaths\", \"Recovered\"],\n        data: [data.confirmed, data.deaths, data.recovered],\n        backgroundColor: [\"#ffffff\", \"#fc6978\", \"#69fca4\"],\n      },\n    ],\n  };\n  //style for autocomplete\n  const useStyles = makeStyles({\n    option: {\n      fontSize: 15,\n      \"& > span\": {\n        marginRight: 10,\n        fontSize: 18,\n      },\n    },\n    floatingLabelFocusStyle: {\n      color: \"#d5d8dc\",\n    },\n    inputRoot: {\n      color: \"white\",\n      \"& .MuiOutlinedInput-notchedOutline\": {\n        borderWidth: \"2px\",\n        borderColor: \"white\",\n      },\n      \"&:hover .MuiOutlinedInput-notchedOutline\": {\n        borderColor: \"#96d1ea\",\n      },\n      \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n        borderColor: \"white\",\n      },\n      \"& MuiOutlinedInput-root\": {\n        borderColor: \"white\",\n        color: \"white\",\n      },\n    },\n  });\n  const classes = useStyles();\n\n  return (\n    <div>\n      <div className=\"top\">\n        <h1>Covid 19 Tracker</h1>\n        <div className=\"search\">\n          <Autocomplete\n            id=\"country-select-demo\"\n            style={{ width: 600 }}\n            options={CountryOption}\n            onChange={handleClick}\n            classes={{\n              option: classes.option,\n              inputRoot: classes.inputRoot,\n            }}\n            autoHighlight\n            getOptionLabel={(option) => option.name}\n            renderOption={(option) => (\n              <React.Fragment>\n                {option.name} ({option.iso2})\n              </React.Fragment>\n            )}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"Choose a country\"\n                color=\"#fff\"\n                variant=\"outlined\"\n                InputLabelProps={{\n                  className: classes.floatingLabelFocusStyle,\n                }}\n                inputProps={{\n                  ...params.inputProps,\n                  autoComplete: \"new-password\", // disable autocomplete and autofill\n                }}\n              />\n            )}\n          />\n        </div>\n      </div>\n      <div className=\"bottom\">\n        <div className=\"left\">\n          <div className=\"country\">\n            {input === \"\" ? <h2>Global</h2> : <h2>{countryName}</h2>}\n          </div>\n          <div className=\"confirmed\">\n            <h5>Total Confirmed</h5>\n            <h1>{new Intl.NumberFormat().format(data.confirmed)}</h1>\n          </div>\n          <div className=\"death\">\n            <h5>Total Deaths</h5>\n            <h1>{new Intl.NumberFormat().format(data.deaths)}</h1>\n          </div>\n          <div className=\"recovered\">\n            <h5>Total Recovered</h5>\n            <h1>{new Intl.NumberFormat().format(data.recovered)}</h1>\n          </div>\n        </div>\n        <div className=\"right\" id=\"line\">\n          {input === \"\" ? (\n            <Line data={globalChart} />\n          ) : (\n            <Bar data={countryChart} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}